---
title: "Group Task"
author: "C. Tangana (DNI: 00000000-X), Rosalía (DNI: 00000000-X), ..."
format:
  html:
    theme: [style.scss]
    toc: true
    toc-location: right
    toc-title: Índice
editor: visual 
editor_options: 
  chunk_output_type: console
---

## Instructions (read before starting)

-   Modify within the `.qmd` document your personal data (names and ID) located in the header of the file.

-   Make sure, **BEFORE further editing** the document, that the `.qmd` file is rendered correctly and the corresponding `.html` is generated in your local folder on your computer.

-   The chunks (code boxes) created are either empty or incomplete. Once you edit what you consider, you must change each chunk to `#| eval: true` (or remove it directly) for them to run.

-   Remember that you can run chunk by chunk with the *play* button or run all chunks up to a given chunk (with the button to the left of the previous one).

### Required packages

> Insert in the lower chunk the packages you will need

```{r}
rm(list = ls())
library(tidyverse)
library(lubridate)
library(forcats)
library(dplyr)
```

## Group task

### Data

The practice will be based on the **electoral data archives** that we have already worked on, compiling data on elections to the Spanish Congress of Deputies from 2008 to the present.

```{r}
# NO TOQUES NADA
#election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
#cod_mun <- read_csv(file = "./data/cod_mun.csv")
#surveys <- read_csv(file = "./data/historical_surveys.csv")
#abbrev <- read_csv(file = "./data/siglas.csv")

election_data <- read_csv(file = "datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "cod_mun.csv")
surveys <- read_csv(file = "historical_surveys.csv")
abbrev <- read_csv(file = "siglas.csv")
```

The data will be as follows:

-   `poll_data`: file with election data for Congress from 2018 to the last ones in 2019.

    -   `tipo_eleccion`: type of election (02 if congressional election)
    -   `anno`, `mes`: year and month of elections
    -   `vuelta`: electoral round (1 if first round)
    -   `codigo_ccaa, codigo_provincia, codigo_municipio, codigo_distrito_electoral`: code of the ccaa, province, municipality and electoral district.
    -   `numero_mesas`: number of polling stations
    -   `censo`: census
    -   `participacion_1, participacion_2`: participation in the first preview (14:00) and second preview (18:00) before polls close (20:00)
    -   `votos_blancos`: blank ballots
    -   `votos_candidaturas`: party ballots
    -   `votos_nulos`: null ballots
    -   ballots for each party

-   `cod_mun`: file with the codes and names of each municipality

-   `abbrev`: acronyms and names associated with each party

-   `surveys`: table of electoral polls since 1982. Some of the variables are the following:

    -   `type_survey`: type of survey (national, regional, etc.)
    -   `date_elec`: date of future elections
    -   `id_pollster`, `pollster`, `media`: id and name of the polling company, as well as the media that commissioned it.
    -   `field_date_from`, `field_date_to`: start and end date of fieldwork
    -   `exit_poll`: whether it is an exit poll or not
    -   `size`: sample size
    -   `turnout`: turnout estimate
    -   estimated voting intentions for the main parties

### Objectives and mandatory items

The objective of the delivery is to perform an analysis of the electoral data, carrying out the debugging, summaries and graphs you consider, both of their results and the accuracy of the electoral polls.

Specifically, **you must work only in the time window that includes the elections from 2008 to the last elections of 2019**.

#### General comments

In addition to what you see fit to execute, the following items are mandatory:

-   Each group should present **at least 48 hours in advance an analysis of the data** in `.qmd` and `.html` format in **slides** mode, which **will be the ones they will present on the day of the presentation**.

-   During the presentation you will **explain the analysis performed** so that **each team member speaks for a similar amount of time** and **each member can be asked about any of the steps**. The grade does not have to be the same for all members.

-   It will be valued not only the content but also the container (aesthetics).

-   It will be valued positively that the slides are hosted on Github.

-   The objective is to demonstrate that the maximum knowledge of the course has been acquired: the more content of the syllabus is included, the better.

#### Mandatory items:

-   Data should be **converted to tidydata** where appropriate.

-   You should **include at least one join** between tables.

-   Reminder: information = variance, so **remove columns that are not going to contribute anything**.

-   The **glue and lubridate** packages should be used at some point, as well as the **forcats**. The use of **ggplot2** will be highly valued.

-   The following should be used at least once:

    -   mutate
    -   summarise
    -   group_by (or equivalent)
    -   case_when

-   We have many, many parties running for election. We will only be interested in the following parties:

    -   PARTIDO SOCIALISTA OBRERO ESPAÑOL (beware: it has/had federations - branches - with some other name).
    -   PARTIDO POPULAR
    -   CIUDADANOS (caution: has/had federations - branches - with some other name)
    -   PARTIDO NACIONALISTA VASCO
    -   BLOQUE NACIONALISTA GALLEGO
    -   COMPROMÍS
    -   CONVERGÈNCIA I UNIÓ
    -   UNIDAS PODEMOS - IU (beware that here they have had various names - IU, los verdes, podem, ezker batua, ...- and have not always gone together, but here we will analyze them together
    -   ESQUERRA REPUBLICANA DE CATALUNYA
    -   EH - BILDU (are now a coalition of parties formed by Sortu, Eusko Alkartasuna, Aralar, Alternatiba)
    -   MÁS PAÍS
    -   VOX

-   Anything other than any of the above parties should be imputed as "OTHER". Remember to add the data after the previous recoding.

-   Party acronyms will be used for the visualizations. The inclusion of graphics will be highly valued (see <https://r-graph-gallery.com/>).

-   You must use all 4 data files at some point.

-   You must define at least one (non-trivial) function of your own.

-   You will have to discard mandatory polls that:

    -   refer to elections before 2018
    -   that are exit polls
    -   have a sample size of less than 750 or are unknown
    -   that have less than 1 or less fieldwork days

-   You must obligatorily answer the following questions (plus those that you consider analyzing to distinguish yourself from the rest of the teams, either numerically and/or graphically)

    -   How is the vote of national parties (PSOE, PP, VOX, CS, MP, UP - IU) distributed against regional or nationalist parties?
    -   Which party was the winner in the municipalities with more than 100,000 habitants (census) in each of the elections?
    -   Which party was the second when the first was the PSOE? And when the first was the PP?
    -   Who benefits from low turnout?
    -   How to analyze the relationship between census and vote? Is it true that certain parties win in rural areas?
    -   How to calibrate the error of the polls (remember that the polls are voting intentions at national level)?
    -   In which election were the polls most wrong?
    -   How were the polls wrong in national parties (PSOE, PP, VOX, CS, MP, UP - IU)?
    -   Which polling houses got it right the most and which ones deviated the most from the results?

#### Marks

**The one who does the most things will not be valued the most**. More is not always better. The **originality** (with respect to the rest of the works, for example in the analyzed or in the subject or ...) of what has been proposed, in the handling of tables (or in the visualization), the **caring** put in the delivery (care in life is important) and the **relevance** of what has been done will be valued. Once you have the mandatory items with your database more or less completed, **think before** chopping code: what could be interesting? What do I need to get a summary both numerical and visual?

Remember that the real goal is to demonstrate a mastery of the tools seen throughout the course. And that happens not only by the quantity of them used but also by the quality when executing them.

## Election_data

### Data cleaning and tidy data

```{r}
election_data_clean <- election_data |> 
  pivot_longer(cols ="BERDEAK-LOS VERDES":"COALICIÓN POR MELILLA", #Pivoting to make tidy data
               names_to = "party",
               values_to = "votes")
  

election_data_clean<-election_data_clean|> 
  mutate(date_elec = make_date(anno, mes)) |> 
  select(-tipo_eleccion, -codigo_distrito_electoral) |> 
  mutate(votes = ifelse(is.na(votes), 0, votes)) #CHANGING ALL NA VALUES IN VOTES TO 0!


#red datasets are needed by NIenke- do not change
election_data_clean_red <- election_data_clean |> 
  select(-anno, -mes, -vuelta,-participacion_1, -participacion_2, -votos_blancos, -votos_nulos, -votos_candidaturas) |> 
  filter(year(date_elec) >= 2018) |> 
  drop_na(votes)
```

## Abbrev data

```{r}

distinct_parties <- election_data_clean |>  
  distinct(party)

# Combine datasets as there are parties in election_data not present in 

abbrev_test <- abbrev |> 
  full_join(distinct_parties, by = c("denominacion" = "party")) 
  
#abbrev_test <- abbrev |> 
  #full_join(distinct_parties, by = c("denominacion" = "party")) |> 
  #filter(is.na(siglas))


#Creating a new column with the collected parties
 abbrev_collect<-abbrev_test |> 
  mutate(party_collect = case_when(
    str_detect(siglas, "PSOE") |
      str_detect(siglas, "P.S.O.E") | 
      str_detect(siglas, "psoe") |
    str_detect(denominacion, "PARTIDO SOCIALISTA") |
    str_detect(denominacion, "PSOE") |
    str_detect(denominacion, "P.S.O.E.") ~ "PSOE", # PARTIDO SOCIALISTA OBRERO ESPAÑOL (beware: it has/had federations - branches - with some other name).
    
    str_detect(denominacion, "CONVERGENCIA I UNIO") ~ "CU", # CONVERGÈNCIA I UNIÓ
    
    str_detect(siglas, "PP") |
    str_detect(denominacion, "PARTIDO POPULAR")  ~ "PP", # PARTIDO POPULAR
    
    str_detect(denominacion, "CIUDADANOS-") ~ "CS", #CIUDADANOS (caution: has/had federations - branches - with some other name)
    
    str_detect(denominacion, "UNIDAS")|
      str_detect(siglas, "PODEMOS")|
      str_detect(denominacion, "VERDES")|
      str_detect(denominacion, "PODEM")|
      str_detect(denominacion, "EZKER") |
      str_detect(siglas, "IU")~ "UP_IU", #UNIDAS PODEMOS - IU (beware that here they have had various names - IU, los verdes, podem, ezker batua, …- and have not always gone together, but here we will analyze them together
    
    str_detect(denominacion, "BILDU")|
      str_detect(siglas, "EH")|
      str_detect(denominacion, "SORTU")|
      str_detect(denominacion, "ALKARTASUNA")|
      str_detect(denominacion, "ARALAR") |
      str_detect(denominacion, "ALTERNATIBA") ~ "EH_BILDU", # EH - BILDU (are now a coalition of parties formed by Sortu, Eusko Alkartasuna, Aralar, Alternatiba)
      

      str_detect(denominacion, "VASCO") ~ "PNV", # PARTIDO NACIONALISTA VASCO
    
    
      str_detect(siglas, "BNG") |
      str_detect(denominacion, "GALLEG") |
      str_detect(denominacion, "GALICIA") |
      str_detect(denominacion, "GALEGUISTA")|
      str_detect(denominacion, "GALEG") |
      str_detect(denominacion, "GALIZ") ~ "BNG", # BLOQUE NACIONALISTA GALLEGO
    
      str_detect(siglas, "VOX") ~ "VOX", # VOX
    
      str_detect(siglas, "PAÍS") ~ "MP", # MÁS PAÍS
    
      str_detect(siglas, "COMPROMÍS")  ~ "CP", # COMPROMÍS
    
      str_detect(siglas, "ERC") |
      str_detect(denominacion, "CATALUNYA SÍ") ~ "ERC", # ESQUERRA REPUBLICANA DE CATALUNYA
    
    TRUE ~ "OTHER"))|> 
    distinct(denominacion, .keep_all = TRUE) 
 
 test <- abbrev_collect |> 
   filter(is.na(siglas))

 national_parties <- c("PSOE", "PP", "VOX", "CS", "MP", "UP_IU")
 
 regional_nationalist_parties <-  c("OTHER", "ERC", "CP", "BNG", "CU", "PNV", "EH_BILDU" )
 
```

## Survey data

### Data cleaning and tidy

-   You will have to discard mandatory polls that:

    -   refer to elections before 2018
    -   that are exit polls
    -   have a sample size of less than 750 or are unknown
    -   that have less than 1 or less fieldwork days

```{r}
survey_clean <- surveys |> 
 filter(year(date_elec) >= 2018) |> #Filtering only years >2018
 filter(exit_poll == FALSE) |> # Only keeping non exit polls
 filter(size >750| size != NA) |> #Only keeping cases with a size ,larger than 750 or are bot NA
 mutate(field_days = field_date_to - field_date_from) |> #New column to count the number of field days
 relocate(field_days, .after = field_date_to) |> #Relocating the field_days column
  filter(field_days>0) |> #Filtering cases with field days >0
  pivot_longer(cols ="UCD":"EV", #Pivoting to make tidy data
               names_to = "party",
               values_to = "vote_int")

```

### Joining tables

```{r}

#Joining the abbrev_collect table with the survey table and adding the abbreviations that are not in the abbrev table to the column: party_collect
survey_clean_collect<-survey_clean |> 
  left_join(abbrev_collect, by = c("party" = "siglas")) |> 
  mutate(party_collect = 
           case_when(party_collect == "PSOE" ~ "PSOE",
                     party_collect == "CS" ~ "CS",
                     party_collect == "UP_IU" ~ "UP_IU",
                     party_collect == "EH_BILDU" ~ "EH_BILDU",
                     party_collect == "PP" ~ "PP",
                     party_collect == "PNV" ~"PNV",
                     party_collect == "BNG" ~ "BNG",
                     party_collect == "VOX" ~ "VOX",
                     party_collect == "MP" ~ "MP",
                     party_collect == "CP" ~ "CP",
                     party_collect == "ERC" ~ "ERC",
                     party_collect == "CU" ~ "CU",
                     TRUE ~ party)) |> 
  select(-party)


#Reducing the data set by taking out unsuseful variables
survey_clean_collect_red <- survey_clean_collect |> 
  select(-field_date_from, -field_date_to, -exit_poll) |> 
  drop_na(vote_int)


abbrev_collect<- abbrev_collect |> 
  select(-siglas)
```

### Creating ID

Creating an ID to match the election_data table

```{r}
survey_clean_collect_red <- survey_clean_collect_red |> 
  mutate(id_join = paste(substr(date_elec, 1, 7), party_collect, sep = "-")) 
```

## Election_data

### Data cleaning and tidy data

```{r}
election_data_clean <- election_data |> 
  pivot_longer(cols ="BERDEAK-LOS VERDES":"COALICIÓN POR MELILLA", #Pivoting to make tidy data
               names_to = "party",
               values_to = "votes")

election_data_clean <- election_data_clean |> 
  left_join(abbrev_collect, by = c("party" = "denominacion")) #many parties not found in 

test <- election_data_clean |> 
  filter(is.na(party_collect)) |> 
  distinct(party) 
  

abbrev_collect |> 
  distinct(denominacion)

election_data_clean<-election_data_clean|> 
  mutate(date_elec = make_date(anno, mes)) |> 
  select(-tipo_eleccion, -codigo_distrito_electoral) |> 
  mutate(votes = ifelse(is.na(votes), 0, votes)) #CHANGING ALL NA VALUES IN VOTES TO 0!



```

(Frederick) Joined the two tables (non-reduced) for the Map visualization

```{r}
election_data_clean_abbrev <- election_data_clean |> 
  left_join(abbrev_collect, by = c("party"= "denominacion"))

election_data_clean <- election_data_clean |> 
  left_join(abbrev_collect, by = c("party"= "denominacion"))

```

### Joining abbrev_collect

```{r}
election_data_clean <- election_data_clean |> 
  mutate(id_join = paste(substr(date_elec, 1, 7), party_collect, sep = "-")) 
```

For last 3 questions

```{r}
#red datasets are needed by NIenke- do not change

election_data_clean_red <- election_data_clean |> 
  select(-anno, -mes, -vuelta,-participacion_1, -participacion_2, -votos_candidaturas) |> 
  filter(year(date_elec) >= 2018) |> 
  drop_na(votes)
```

### Alex- Q1 How is the vote of national parties (PSOE, PP, VOX, CS, MP, UP - IU) distributed against regional or nationalist parties?

Compare total number of votes of the national parties (PSOE, PP, VOX, CS, MP, UP - IU) against the other parties of focus (

```{r}
election_data_clean <- election_data_clean |> 
  left_join(abbrev_collect, by = c("party"= "denominacion"))

#data set I need for my question
election_data_clean_1 <-  election_data_clean |> 
  select(-(anno:votos_candidaturas)) 
            
#slicing the sample to make the code and then will run it when its all done
election_data_sample <- election_data_clean_1 |> 
  slice_sample(prop =0.10)

national_parties
regional_nationalist_parties

election_data_sample <-election_data_sample |>
  group_by(date_elec, party_collect) |> 
  mutate(party_type =
           case_when(party_collect %in% c("PSOE", "PP", "VOX", "CS", "MP", "UP_IU") ~ "national",
                      TRUE ~ "regional/nationalist")) |> 
  mutate(sum_votes = sum(votes)) |> 
  ungroup() 

  
#Summing the total votes per party per election
election_data_sample <- election_data_sample |> 
  group_by(date_elec, party_type) |> 
  mutate(votes_elec_party = sum(votes)) |> 
  ungroup() 
 
#Summing the total votes voted per election
election_data_sample <- election_data_sample |> 
   group_by(date_elec) |> 
   mutate(votes_elec_total = sum(votes)) |> 
   ungroup()
 
#Computing a percentage of how many votes a party received compared to the total votes voted
election_data_sample <- election_data_sample |> 
   mutate(votes_elec_party_perc = (votes_elec_party/votes_elec_total)*100)

#creating new dataset to visualize the relationship between the share of national parties and regional/ nationalist parties
graph_data <- election_data_sample |> 
  group_by(date_elec) |> 
  distinct(party_type, votes_elec_party_perc) 

plot1 <-  ggplot(data = graph_data, mapping = aes(x= date_elec, y= votes_elec_party_perc, color = party_type, group = party_type)) +
          geom_line()
  


```

### Alex- Q2 Which party was the winner in the municipalities with more than 100,000 habitants (census) in each of the elections?

### Which party was the second when the first was the PSOE? And when the first was the PP?

```{r}

```

### Who benefits from low turnout?

### 1. How is the vote of national parties (PSOE, PP, VOX, CS, MP, UP - IU) distributed against regional or nationalist parties?

### 2. Which party was the winner in the municipalities with more than 100,000 habitants (census) in each of the elections?

```{r}
election_data_clean_2 <-election_data_clean |> 
  mutate(codigo_ccaa_pro_muni = paste(codigo_ccaa, codigo_provincia, codigo_municipio, sep = "-")) |> 
   group_by(codigo_ccaa_pro_muni) |>
  mutate(votes_nul_blanc_total = votos_blancos+ votos_nulos) |> 
  mutate(votes_municipality = sum(votes)) |> 
  ungroup() |> 
  mutate(total_votes_munici = votes_nul_blanc_total + votes_municipality) |>
  group_by(codigo_ccaa_pro_muni, party_collect) |> 
  mutate(votes_party_municipality = votes) |> 
  ungroup() |> 
  mutate(votes_perc_party_municipality = (votes_party_municipality/total_votes_munici)*100) |> 
  filter(censo >100000) |> 
  group_by(codigo_ccaa_pro_muni) |> 
  mutate(winner_municipality =max(votes_perc_party_municipality)) |> 
  ungroup()
    
    
  
```

### Which party was the second when the first was the PSOE? And when the first was the PP?

```{r}

```

### Who benefits from low turnout?

### Joining abbrev_collect

## Joining survey and election data

Joining survey_clean with election_data_clean using the id_join from both tables

```{r}
survey_elec <- election_data_clean_red |> 
  left_join(survey_clean_collect_red, by = c("id_join" = "id_join"), relationship = "many-to-many") 

survey_elec<- survey_elec |> 
  mutate(party_collect =party_collect.x) |> 
  select(-party_collect.y, -party_collect.x) |> 
  mutate(date_elec = date_elec.x) |> 
  mutate(date_elec_survey = date_elec.y) |> 
  select(-date_elec.x, -date_elec.y) |> 
  drop_na(votes) |> 
  drop_na(vote_int)

#Only for the purpose of coding 
survey_elec_sample <- survey_elec |> 
  slice_sample(prop =0.10)

#Checking for duplicates -> many duplicates
#duplicates_all_columns <- survey_elec_sample[duplicated(survey_elec_sample), ] 

#Only keeping 1 of the duplicate rows !!! Check problem with municipality dplicates
survey_elec_sample<-survey_elec_sample |> 
  filter(!duplicated(survey_elec_sample))  

```

### In which election were the polls most wrong?

```{r}

#Summing the total votes per party per election
survey_elec_sample<-survey_elec_sample |> 
  group_by(date_elec, party_collect) |> 
  mutate(votes_elec_party = sum(votes)) |> 
  ungroup() 
 
#Summing the total votes voted per election 
survey_elec_sample<-survey_elec_sample |> 
   group_by(codigo_ccaa_pro_muni, date_elec)
   mutate(votes_total_blancos_nulos = votos_blancos + votos_nulos) |>
   ungroup() |> 
   group_by(date_elec) |> 
   mutate(votes_elec = sum(votes_total)) |> 
   ungroup() |> 
   mutate(votes_elec_total = votes_total_blancos_nulos + votes_elec)
 
#Computing a percentage of how many votes a party received compared to the total votes voted
survey_elec_sample<-survey_elec_sample |> 
   mutate(votes_elec_party_perc = (votes_elec_party/votes_elec_total)*100)
 
#subtracting the voting intentions (in percentage) of the percenatage of votes gained per per party per election. 
#As the difference can be both positive and negative, the differences in votes are squared to account for the negatives
survey_elec_sample<-survey_elec_sample |>
  mutate(diff_vote_int = votes_elec_party_perc - vote_int) |> 
  mutate(diff_vote_int_2 =diff_vote_int^2) 
  
#Creating the average difference between percentage of votes gained and voting intentions per election
#Taking the squareroot to return the variable in to the orginal units
survey_elec_sample<-survey_elec_sample |> 
   group_by(date_elec) |> 
  mutate(avg_diff_vote_int = sqrt(mean(diff_vote_int_2, na.rm = TRUE))) |> 
  ungroup() 

#Checking in which election the polls were post wrong 
 survey_elec_sample |> 
   distinct(avg_diff_vote_int, date_elec)

```

### How were the polls wrong in national parties (PSOE, PP, VOX, CS, MP, UP - IU)?

Problem: "UP_IU"

```{r}

#Computing the average polling error per party per election
survey_elec_national_sample<-survey_elec_sample |> 
  filter(party_collect == "PSOE"|party_collect == "PP"|party_collect =="VOX"|party_collect =="CS "|party_collect =="MP"|party_collect =="UP_IU") |> 
  group_by(date_elec, party_collect) |> 
  mutate(avg_diff_poll = sqrt(mean(diff_vote_int_2, na.rm = TRUE)) ) |> 
  ungroup() 

#Obtaining the results, note: for some parties no result
survey_elec_national_sample |> 
  distinct(avg_diff_poll, date_elec, party_collect) |> 
  arrange(date_elec)
```

### Which polling houses got it right the most and which ones deviated the most from the results?

```{r}
#Computing the average polling error per polling house per election and obtaining the minimum and maxium polling with their corresonding pollhouses per election
survey_elec_sample<-survey_elec_sample |> 
  group_by(id_pollster, date_elec) |> 
  mutate(avg_diff_pollhouse = sqrt(mean(diff_vote_int_2, na.rm = TRUE))) |>
  ungroup() |> 
  group_by(date_elec) |> 
  mutate(max_avg_diff_pollhouse = max(avg_diff_pollhouse)) |> 
  mutate(min_avg_diff_pollhouse = min(avg_diff_pollhouse))

#Obtaining the result for the maximum polling error
survey_elec_sample|> 
  distinct(max_avg_diff_pollhouse, date_elec, id_pollster) |> 
  arrange(date_elec)

#Obtaining the result for the minimum polling error
survey_elec_sample|> 
  distinct(min_avg_diff_pollhouse, date_elec, id_pollster) |> 
  arrange(date_elec)
  
```

## Free questions

### Vote transfers (Mika)

Election data

```{r}

```

### Voter turnout (Frederick)

-   per election / per election or autonomic community (ccaa)

-   lollipop chart

For each community voter turnouts are calculated.

```{r}
# Voter turnout regions
election_data_clean_lollipop <-
  election_data_clean |> 

  filter(date_elec >= "2019-04-01") |> 
  mutate(votes_casted = votos_candidaturas + votos_blancos + votos_nulos) |> 
  select(-votos_blancos, -votos_candidaturas, -votos_nulos) |> 
  mutate(municipio_id = paste(codigo_provincia, codigo_municipio, sep = "-")) |> 
  distinct(municipio_id, mes, .keep_all = T) |> 
  select(municipio_id, codigo_ccaa, votes_casted, censo, mes) |> 
  group_by(codigo_ccaa, mes) |> 

  summarise(votes_sum = sum(votes_casted),
            population_sum = sum(censo) ) |> 
  ungroup() |> 
  mutate(voter_turnout = (votes_sum / population_sum) * 100) 

# Voter turnout Spain

election_data_clean_lollipop_avg <-
  election_data_clean |> 

  filter(date_elec >= "2019-04-01") |> 
  mutate(votes_casted = votos_candidaturas + votos_blancos + votos_nulos) |> 
  select(-votos_blancos, -votos_candidaturas, -votos_nulos) |> 
  mutate(municipio_id = paste(codigo_provincia, codigo_municipio, sep = "-")) |> 
  distinct(municipio_id, mes, .keep_all = T) |> 
  select(municipio_id, codigo_ccaa, votes_casted, censo, mes) |>
  group_by(mes) |> 

  summarise(votes_sum = sum(votes_casted),
            population_sum = sum(censo) ) |>
  mutate(voter_turnout = (votes_sum / population_sum) * 100)

election_data_clean_lollipop_avg$codigo_ccaa <- "00"


election_data_clean_lollipop <- bind_rows(election_data_clean_lollipop, election_data_clean_lollipop_avg)

```

Data manipulation for differences and factorising 'codigo_ccaa'

```{r}
# differences
election_data_clean_lollipop_dif <- election_data_clean_lollipop |> 
  group_by(codigo_ccaa) |> 
  mutate(difference = voter_turnout - lag(voter_turnout, default = voter_turnout[1])) |> 
  ungroup() |> 
  filter(mes == "11")

# ordering codigo variable for subsequent plot
max_turnout_mes04 <- election_data_clean_lollipop %>%
  filter(mes == "04") %>%
  group_by(codigo_ccaa) %>%
  summarize(max_turnout = max(voter_turnout))

# Order codigo_ccaa based on max_turnout_mes11
order_by_max_turnout <- max_turnout_mes04 %>%
  arrange(max_turnout) %>%
  pull(codigo_ccaa)

# Apply the order to the codigo_ccaa factor
election_data_clean_lollipop$codigo_ccaa <- factor(
  election_data_clean_lollipop$codigo_ccaa,
  levels = order_by_max_turnout
)

```

Creating the lollipop graph

```{r}

# for segments
data_00 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "00")
data_01 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "01")
data_02 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "02")
data_03 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "03")
data_04 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "04")
data_05 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "05")
data_06 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "06")
data_07 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "07")
data_08 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "08")
data_09 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "09")
data_10 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "10")
data_11 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "11")
data_12 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "12")
data_13 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "13")
data_14 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "14")
data_15 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "15")
data_16 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "16")
data_17 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "17")
data_18 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "18")
data_19 <- election_data_clean_lollipop |> 
  filter(codigo_ccaa == "19")

# for differently colored Spain label
label_Spain <- election_data_clean_lollipop |> 
  filter(codigo_ccaa =="00") |> 
  mutate(codigo_ccaa = as.character(codigo_ccaa))



ggplot(election_data_clean_lollipop, aes(x = voter_turnout, y = codigo_ccaa, group= mes), size = 2) + 
  geom_point(aes(color = mes)) +
  labs(title = "Difference in Voter Turnout\nby Region (April vs. November 2019)",
       x = "",
       y = "") +
  guides(col= guide_legend(title= "Election")) +
  scale_color_manual(labels = c("April 2019", "November 2019"), values = c("blue", "red")) +
  scale_x_continuous(labels = scales::percent_format(scale = 1),
                     limits = c(45, NA),
                     breaks = seq(45, 80, by = 5),) +
   geom_segment(data = data_00, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_01, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_02, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_03, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
   geom_segment(data = data_04, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_05, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_06, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_07, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
   geom_segment(data = data_08, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_09, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_10, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_11, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
   geom_segment(data = data_12, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_13, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_14, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_15, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
   geom_segment(data = data_16, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_17, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_18, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_segment(data = data_19, aes(xend = max(voter_turnout), yend = codigo_ccaa), color = "black") +
  geom_text(data = election_data_clean_lollipop_dif,
            aes(label = sprintf("%.2f%%", difference),
                x = voter_turnout, 
                y = codigo_ccaa),
            vjust = 0.4,
            hjust = 1.1,
            size = 3, 
            color = "black") +
  theme_minimal() +
  scale_y_discrete(labels=c("00" = "Average in Spain",

                            "01"="Andalucia",
                            "02"="Aragon",
                            "03"="Asturias",
                            "04"="Baleares",
                            "05"="Cantabria",
                            "06"="Castilla La Mancha",
                            "07"="Castilla Leon",
                            "08"="Cataluna",
                            "09"="Canarias",
                            "10"="Extremadura",
                            "11"="Galicia",
                            "12"="Madrid",
                            "13"="Murcia",
                            "14"="Navarra",
                            "15"="Comunidad Valenciana",
                            "16"="Pais Vasco",
                            "17"="La Rioja",
                            "18"="Ceuta",
                            "19"="Melilla")) + 
  theme(plot.margin = margin(5, 10, 5, -8))



```

### Election winners map (Frederick)

Getting the data for first 2019 election

```{r}

election_data_clean_red_winner_2019_a <- election_data_clean_abbrev |> 
  select(-anno, -mes, -vuelta,-participacion_1, -participacion_2, -votos_nulos) |> 
  filter(date_elec == "2019-04-01") |> 
  drop_na(votes) |> 
  mutate(municipio_id = paste(codigo_provincia, codigo_municipio, sep = "-")) |> 
  group_by(date_elec, municipio_id) |> 
  mutate(vote_share = (votes / (votos_candidaturas + votos_blancos))*100) |> ungroup() |> 
  slice_max(n = 1, vote_share, by = c(municipio_id)) |> 
  select(municipio_id, vote_share, party_collect, party)


test <- election_data_clean_red_winner_2019_a |> 
  filter(is.na(party_collect))
```

### Vote transfers

```{r}
election_data_mika <- 
  election_data_clean |> 
  filter(anno == 2019) |> 
  select(-c(anno, numero_mesas, vuelta, censo, participacion_1, participacion_2))

data_apr<- election_data_mika |> 
  filter(mes == "04") |> 
  summarise(votos_apr = sum(votes),
            .by = party_collect)

data_nov<- election_data_mika |> 
  filter(mes == "11") |> 
  summarise(votos_nov = sum(votes),
            .by = party_collect)

vote_transfers<- data_apr |> 
  left_join(data_nov, by = "party_collect")


```

```{r}
library(GGally)
party_colors <- c("UP_IU"="#8968CD", 
                    "PSOE"="#CD2626",
                    "PP"="#0055A4", 
                    "VOX"="#5ABF35", 
                    "BAI"="#EECFA1",
                    "OTHER" = "#999999",
                    "PNV" = "#008341",
                    "EH_BILDU" = "#00D0B6",
                    "CS" = "#FF5001",
                    "ERC" = "#F0D85D",
                    "BNG" = "#77B4E0",
                    "MP" = "#02988B")

vote_transfers |> 
  ggparcoord(columns = 2:3, 
             groupColumn = 1, 
             showPoints = TRUE) +
  scale_color_manual(values = party_colors)


```

### Network analysis (Mika)

```{r}

```
